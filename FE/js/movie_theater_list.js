document.addEventListener("DOMContentLoaded", function () {
    // API Base URL
    const API_BASE = 'http://localhost:3000/api';

    // Load danh s√°ch th√†nh ph·ªë t·ª´ database
    async function loadCities() {
        try {
            console.log('üèôÔ∏è Loading cities from:', `${API_BASE}/cities`);
            const response = await fetch(`${API_BASE}/cities`);
            const result = await response.json();

            console.log('üìä Cities API Response:', result);

            if (result.success && result.data) {
                console.log('‚úÖ Cities data:', result.data);
                displayCities(result.data);
            } else {
                console.error('‚ùå Cities API Error:', result.error);
                showAlert('L·ªói khi t·∫£i danh s√°ch th√†nh ph·ªë: ' + result.error, 'error');
            }
        } catch (error) {
            console.error('‚ùå Cities Network Error:', error);
            showAlert('L·ªói khi t·∫£i danh s√°ch th√†nh ph·ªë: ' + error.message, 'error');
        }
    }

    // Hi·ªÉn th·ªã danh s√°ch th√†nh ph·ªë trong dropdown
    function displayCities(cities) {
        const dropdown = document.getElementById('cityDropdown');
        dropdown.innerHTML = '';

        if (cities && cities.length > 0) {
            cities.forEach(city => {
                const li = document.createElement('li');
                li.innerHTML = `<a class="dropdown-item" href="#" data-city-id="${city.MATP}">${city.TENTP}</a>`;
                dropdown.appendChild(li);
            });
        } else {
            const li = document.createElement('li');
            li.innerHTML = '<a class="dropdown-item text-muted">Kh√¥ng c√≥ th√†nh ph·ªë n√†o</a>';
            dropdown.appendChild(li);
        }
    }

    // X·ª≠ l√Ω khi ch·ªçn th√†nh ph·ªë
    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('dropdown-item') && e.target.dataset.cityId) {
            e.preventDefault();

            const cityName = e.target.textContent.trim();
            const cityId = e.target.dataset.cityId;

            console.log(`üèôÔ∏è [UI] City selected: ${cityName} (ID: ${cityId})`);

            // C·∫≠p nh·∫≠t input
            const cityInput = document.getElementById('cityInput');
            cityInput.value = cityName;

            // L∆∞u cityId ƒë·ªÉ s·ª≠ d·ª•ng sau
            cityInput.dataset.cityId = cityId;

            console.log(`üíæ [UI] Saved cityId to input:`, cityInput.dataset.cityId);

            // ƒê√≥ng dropdown
            const button = document.querySelector('.dropdown-toggle');
            const dropdown = bootstrap.Dropdown.getInstance(button) || new bootstrap.Dropdown(button);
            dropdown.hide();
            button.blur();
        }
    });

    // Load danh s√°ch r·∫°p theo th√†nh ph·ªë
    async function loadBranchesByCity(cityId) {
        try {
            console.log('üè¢ Loading branches for city:', cityId);
            console.log('üåê API URL:', `${API_BASE}/branches?city=${cityId}`);

            const response = await fetch(`${API_BASE}/branches?city=${cityId}`);
            console.log('üì° Response status:', response.status);
            console.log('üì° Response headers:', response.headers);

            const result = await response.json();
            console.log('üìä API Response:', result);

            if (result.success) {
                console.log('‚úÖ Successfully loaded branches:', result.data);
                displayBranches(result.data);
            } else {
                console.error('‚ùå API Error:', result.error);
                showAlert('L·ªói khi t·∫£i danh s√°ch r·∫°p: ' + result.error, 'error');
            }
        } catch (error) {
            console.error('‚ùå Network Error:', error);
            showAlert('L·ªói khi t·∫£i danh s√°ch r·∫°p: ' + error.message, 'error');
        }
    }

    // Hi·ªÉn th·ªã danh s√°ch r·∫°p trong modal
    function displayBranches(branches) {
        const tbody = document.querySelector('#myModal tbody');
        tbody.innerHTML = '';

        if (branches && branches.length > 0) {
            branches.forEach(branch => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${branch.TENRAP}</td>
                    <td>${branch.DIACHI}</td>
                    <td>${branch.TENTP}</td>
                    <td>Ch∆∞a c·∫≠p nh·∫≠t</td>
                    <td>Ch∆∞a c·∫≠p nh·∫≠t</td>
                `;
                tbody.appendChild(row);
            });
        } else {
            tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">Kh√¥ng c√≥ r·∫°p n√†o trong th√†nh ph·ªë n√†y</td></tr>';
        }
    }

    // X·ª≠ l√Ω khi click n√∫t "Xem Danh S√°ch R·∫°p"
    document.querySelector('.btn.btn-custom').addEventListener('click', function () {
        const cityInput = document.getElementById('cityInput');
        const cityId = cityInput.dataset.cityId;

        console.log('üîò [UI] Button clicked');
        console.log('üèôÔ∏è [UI] City input value:', cityInput.value);
        console.log('üÜî [UI] City ID from dataset:', cityId);

        if (!cityId) {
            console.log('‚ö†Ô∏è [UI] No city selected');
            showAlert('Vui l√≤ng ch·ªçn th√†nh ph·ªë tr∆∞·ªõc!', 'warning');
            return;
        }

        console.log('‚úÖ [UI] Proceeding to load branches for city:', cityId);
        loadBranchesByCity(cityId);
    });

    // Hi·ªÉn th·ªã th√¥ng b√°o
    function showAlert(message, type = 'info') {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
        alertDiv.style.position = 'fixed';
        alertDiv.style.top = '20px';
        alertDiv.style.right = '20px';
        alertDiv.style.zIndex = '9999';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        document.body.appendChild(alertDiv);

        // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.parentNode.removeChild(alertDiv);
            }
        }, 5000);
    }

    let modal = document.getElementById('myModal');
    let btn = document.querySelector('.btn.btn-custom');

    modal.addEventListener('show.bs.modal', function () {
        btn.classList.add('modal-open-btn');
    });

    modal.addEventListener('hidden.bs.modal', function () {
        btn.classList.remove('modal-open-btn');
    });

    // Load cities khi trang load
    loadCities();
});